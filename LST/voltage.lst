C51 COMPILER V9.52.0.0   VOLTAGE                                                           04/03/2018 16:24:31 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE VOLTAGE
OBJECT MODULE PLACED IN .\Output\voltage.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Code\voltage.c OPTIMIZE(4,SPEED) BROWSE INCDIR(.\Code\Common;.\Code;.\Co
                    -de\BSP;.\Code\N76E003_HW) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\voltage.lst) TABS(2) OBJECT(.\Output\voltag
                    -e.obj)

line level    source

   1          
   2          #include "N76E003.h"
   3          #include "Common.h"
   4          #include "Delay.h"
   5          #include "Audio.h"
   6          #include "Board.h"
   7          #include "PWM.h"
   8          #include "motor.h"
   9          #include "SFR_Macro.h"
  10          #include "Function_define.h"
  11          #include "string.h"
  12          #include "UART.h"
  13          #include "ADC.h"
  14          #include "voltage.h"
  15          #include "GPIO.h"
  16          
  17          u16 g_I_motor;  //电机电流
  18          u8 bat_full = 0;
  19          u8 bat_10   = 0;
  20          u8 bat_20   = 0;
  21          
  22          //电压采样标志
  23          u8 vol_sample=0;
  24          void Set_Vol_Sampling(void)
  25          {
  26   1        vol_sample = 1;//正在电压采样
  27   1      }
  28          void Reset_Vol_Sampling(void)
  29          {
  30   1        vol_sample = 0;
  31   1      }
  32          u8 Get_Vol_Sampling(void)
  33          {
  34   1        return vol_sample;
  35   1      }
  36          
  37          /*
  38            平均值
  39          */
  40          #define AVERAGE_N   2
  41          u8 Get_Vol_Average(void)
  42          {
  43   1        u8 adc;
  44   1      //  u8 i=0;
  45   1      //  u16 sum=0;
  46   1      //  
  47   1      //  delay_adc();
  48   1      //  for(i=0;i<AVERAGE_N;i++)
  49   1      //  {
  50   1      //    sum += Get_ADC_BAT_8Bit();
  51   1      //    delay_adc();
  52   1      //  }
  53   1      //  
C51 COMPILER V9.52.0.0   VOLTAGE                                                           04/03/2018 16:24:31 PAGE 2   

  54   1      //  return sum/AVERAGE_N;
  55   1        
  56   1        adc = Get_ADC_BAT_8Bit();
  57   1        return adc;
  58   1      }
  59          
  60          /*
  61            发送电池电量到APP
  62            格式：
  63            66 D1 D2 D3 D4 D5 CHECKSUM 99
  64            CHECKSUM= (D1^D2^D3^D4^D5)&0XFF
  65          
  66          */
  67          u8 voltage_data[8] = {0x66,0x00,0x00,0x00,0x00,0x00,0x00,0x99};
  68          void Send_Voltage(u8 v)
  69          {
  70   1      //  Send_Data_To_UART0(0x01);
  71   1      //  Send_Data_To_UART0(v);
  72   1        voltage_data[1] = v;
  73   1        voltage_data[6] = v;
  74   1        SendDataUart(voltage_data,8);
  75   1      }
  76          
  77          /*
  78            获取电机电流的比例系数
  79                  0 - LM_I_MOTOR
  80            返回：0 - 10
  81          */
  82          u8 Get_I_Motor_R(void)
  83          {
  84   1        u8 r;
  85   1        if(g_I_motor > LM_I_MOTOR)
  86   1        {
  87   2          r = 10;
  88   2        }
  89   1        else
  90   1        {
  91   2          r = (u8)((g_I_motor*10)/LM_I_MOTOR);
  92   2        }
  93   1        return r;
  94   1      }
  95          
  96          /*
  97            根据电机电流设置阈值
  98            电池：5节充电电池-6V  or  5节干电池-7.5V
  99            电流越大，阈值越小
 100          */
 101          void Set_Bat_TH_R(u8 r)
 102          {
 103   1        u8 d;
 104   1        d = r*5;
 105   1        
 106   1        bat_full = 0x96-d;//6.2V
 107   1        bat_20   = 0x87-d;//5.6V
 108   1        bat_10   = 0x7A-d;//5.2V    
 109   1      }
 110          
 111          /*
 112            电压监测
 113          */
 114          static u8 vol_Flag = 0xAF;
 115          static u8 vol_avr;
C51 COMPILER V9.52.0.0   VOLTAGE                                                           04/03/2018 16:24:31 PAGE 3   

 116          static  u16 v_Gap;
 117          static  u8  v_R=0xFF;
 118          void Voltage_Monitor(void)
 119          { 
 120   1        static u16 i=0;
 121   1        
 122   1        if(i>=2500)
 123   1        {
 124   2          i=0;
 125   2          
 126   2          Set_Vol_Sampling();//正在采样中
 127   2          v_Gap = Get_ADC_BandGap();    //单片机内部标准电压，1.22V
 128   2          vol_avr = Get_Vol_Average();  //采样电压。
 129   2          //计算vol_avr 与 v_Gap 的比值，就能知道实际电压
 130   2          Reset_Vol_Sampling();//电压采样结束
 131   2          
 132   2          /* v_R=1 对应实际电压 0.041V */
 133   2          if(vol_avr < 0xC5)//输入过高限制，以免溢出 . v_Gap 恒定= 0x5A
 134   2            v_R = (vol_avr*100)/v_Gap;
 135   2          else
 136   2            v_R = 0xFF;
 137   2          
 138   2          Set_Bat_TH_R(Get_I_Motor_R());//设置电量阈值
 139   2          
 140   2          if(v_R < bat_10)     //10% 
 141   2            vol_Flag = 0xA1;
 142   2          else if(v_R < bat_20)//20%   
 143   2          {
 144   3            if(vol_Flag!=0xA1)
 145   3              vol_Flag = 0xA2;
 146   3          }
 147   2          else if(v_R > bat_full)//电量充足  
 148   2            vol_Flag = 0xAF;
 149   2          
 150   2          //发送电量状态到APP
 151   2          Send_Voltage(vol_Flag);
 152   2        }
 153   1        else
 154   1        {
 155   2          i++;
 156   2        } 
 157   1      }
 158          
 159          /*
 160            马达电流 限流
 161            过流、堵转 保护
 162          */
 163          void I_Limit(void)
 164          {
 165   1        //if(Get_ADC() > 200)
 166   1        if(!Get_Vol_Sampling())//如果没有在进行电压采样，才能进行电流采样
 167   1        {
 168   2          g_I_motor = Get_ADC();
 169   2          if( g_I_motor > LM_I_MOTOR )
 170   2          {
 171   3            SetPWM_Stop();
 172   3            //SetPWM_Start();
 173   3          }
 174   2          else
 175   2          {
 176   3            SetPWM_Start();
 177   3          }
C51 COMPILER V9.52.0.0   VOLTAGE                                                           04/03/2018 16:24:31 PAGE 4   

 178   2        } 
 179   1      }
 180          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    364    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     21       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
