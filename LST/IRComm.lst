C51 COMPILER V9.52.0.0   IRCOMM                                                            09/08/2017 15:00:04 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE IRCOMM
OBJECT MODULE PLACED IN .\Output\IRComm.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Code\IRComm.c OPTIMIZE(4,SPEED) BROWSE INCDIR(.\Code\Common;.\Code;.\Cod
                    -e\BSP;.\Code\N76E003_HW) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\IRComm.lst) TABS(2) OBJECT(.\Output\IRComm.o
                    -bj)

line level    source

   1          /*
   2          **********************************************************************
   3          *完成红外发送，接收，处理功能
   4          *1. 每隔400ms,发送 1000Hz红外，时间长度是200ms
   5          *2. 在发送开始后，开始检测P03管脚的电压，与设定最低电压比较
   6          *3. 发送前执行检测，如果发现有脉冲从P04管脚进入，则表明可能有其它发送源
   7          *
   8          ***********************************************************************
   9          */
  10          
  11          #include "Common.h"
  12          #include "Board.h"
  13          #include "IRComm.h"
  14          /***********************Local function ***********************/
  15          /***********************Local Defination***********************/
  16          
  17          /* Private defines -----------------------------------------------------------*/
  18          #define IR_CARNUM_MAX  1
  19          // Rx status 
  20          #define IR_IDLE      0
  21          #define IR_RX_HEAD_0 1
  22          #define IR_RX_HEAD_1 2
  23          #define IR_RX_DATA_0 3
  24          #define IR_RX_DATA_1 4
  25          
  26          // Tx status
  27          
  28          #define TX_WAITSENDING 1
  29          #define TX_SEND_HEAD_0 2
  30          #define TX_SEND_HEAD_1 3
  31          #define TX_SEND_DATA_0_HIGH 4
  32          #define TX_SEND_DATA_0_LOW 5
  33          #define TX_SEND_DATA_1 6
  34          
  35          //event define
  36          #define IR_EVENT_INT  1
  37          #define IR_EVENT_TIMER 2
  38          // Rx timing 
  39          #define PW_HEAD_LOW    3000 //us
  40          #define PW_HEAD_HIGH   2000 //us
  41          #define PW_DATA_0_HIGH  1000//us logic 1 preble
  42          #define PW_DATA_0_LOW    500//us logic 0 preble
  43          #define PW_DATA_1       500//us data phase1 
  44          #define PW_TOLERANCE   200// us timing tolerance
  45          
  46          // Tx timing
  47          #define TX_LC_PRD     (150000l)//us location sending period
  48          #define TX_LC_CDMA    100//max us
  49          
  50          // Rx Flag
  51          #define RX_FLG_NEWCAR  1
  52          #define RX_FLG_ATTACK  2
  53          
C51 COMPILER V9.52.0.0   IRCOMM                                                            09/08/2017 15:00:04 PAGE 2   

  54          // ctrl mode
  55          #define CTRL_APPMODE   0x00
  56          #define CTRL_RMTMODE   0x01
  57           
  58          /***********************Global Variables ***********************/
  59          ushort gIRLastTick[4];
  60          ushort gIntSavedTick[4];
  61          
  62          EUINT8 gIRSta[4];
  63          EUINT8 gRxBitCnt[4];
  64          
  65          EUINT8 gRxBitSet;
  66          EUINT8 gLcTxDataCursor;
  67          EUINT8 gLcTxSta;//location sending status
  68          EUINT8 gattackpending;
  69          EUINT8 grxflg;//to indicate the rx flg, new car is found=1, attact is found=2
  70          EUINT16 gRxData[4];
  71          EUINT16 gTxSendData;
  72          
  73          EUINT16 glcCDSATick;
  74          EUINT16 gAttackData;
  75          
  76          
  77          EUINT8 gNeighborCar;//[IR_CARNUM_MAX];//
  78          EUINT8 gAttackInfo;
  79          EUINT8 gCarNum;
  80          EUINT8 gCarID=0x01;//0x03;
  81          EUINT8 gCtrlMode=CTRL_APPMODE;
  82           
  83          /* Private functions ---------------------------------------------------------*/
  84          //static uchar IR_CH1_RecvOperate(uchar event,uchar level,ushort tick);
  85          static void IR_RxProcess(void);
  86          static void IR_TxProcess(void);
  87          static uchar IR_RecvOperate(uchar i,uchar event,uchar level,ushort tick);
  88          static uchar ASSER_PULSE(ushort pwcnt,ushort refcnt,ushort tolerance );
  89          static void SaveCarID(uchar dir,ushort rxdata);
  90          static void SaveAttackInfo(uchar dir,ushort rxdata);
  91          static void TxTimerCount(void);
  92          static ushort GetMinus(ushort tick1,ushort tick2);
  93          static uchar CheckData(uchar dir, uchar bitlen,ushort  rxdata);
  94          static void CheckFragData(uchar dir,uchar bitlen,ushort  rxdata);
  95          static uchar IsIRBusy(void);
  96          
  97          void FrontIntHandler(void);
  98          void BackIntHandler(void);
  99          void LeftIntHandler(void);
 100          void RightIntHandler(void);
 101          //static uchar GetIOLevel(uchar i);
 102          /*****************************************************************************
 103          brief: IR IO and variables init , called in main.c 
 104          param:  void
 105          return: void
 106          *********************************************************************************/
 107          void IRComm_Init(void)
 108          {
 109   1        ushort tmp;
 110   1        uchar i;
 111   1       
 112   1        gIRSta[0]=0;gIRSta[1]=0;gIRSta[2]=0;gIRSta[3]=0;
 113   1        
 114   1        gLcTxSta=0;//glcpending=0;
 115   1        gattackpending=0;//gisLcTx=1;
C51 COMPILER V9.52.0.0   IRCOMM                                                            09/08/2017 15:00:04 PAGE 3   

 116   1       
 117   1       // assemble the Leading INFO_ID and CAR_ID 
 118   1        gAttackData=0;//&=((IR_INFOID_MASK)|(IR_CARID_MASK));
 119   1        gAttackData|=0xC000;//((0x0002<<14));
 120   1        
 121   1        tmp=gCarID;
 122   1        tmp<<=10;//IR_CARID_POS;
 123   1        gAttackData|=tmp;
 124   1       
 125   1        grxflg=0;
 126   1       
 127   1        // clear all buffer of the neibor
 128   1      
 129   1        gNeighborCar=0;
 130   1        
 131   1        RegGPIOIntHandler(EXTI_INT1,FrontIntHandler);
 132   1        RegGPIOIntHandler(EXTI_INT0,BackIntHandler);
 133   1        RegGPIOIntHandler(EXTI_Px5,LeftIntHandler);
 134   1        RegGPIOIntHandler(EXTI_Px6,RightIntHandler);
 135   1       
 136   1      }
*** WARNING C280 IN LINE 110 OF Code\IRComm.c: 'i': unreferenced local variable
 137          
 138          void IRCommSta(void)
 139          {
 140   1        IR_TxProcess();
 141   1        IR_RxProcess();
 142   1      }
 143          /*****************************************************************************
 144          brief: GetCarNum , get the neighborhood cars num called in protocol.c 
 145          param:  void
 146          return: gCarNum
 147          *********************************************************************************/
 148          uchar GetCarNum(void)
 149          {
 150   1        return gCarNum;
 151   1      }
 152          
 153          /*****************************************************************************
 154          brief: GetNeighborCarData , get the neighborhood cars data pointer, called in protocol.c 
 155          param:  void
 156          return: pointer of gNeighborCar
 157          *********************************************************************************/
 158          uchar GetNeighborCarData(void)
 159          {
 160   1        return gNeighborCar;
 161   1      
 162   1      }
 163          /*****************************************************************************
 164          brief: SaveCarID , get the neighborhood cars data from the rxdata, called in protocol.c 
 165          param:  void
 166          return: void
 167          *********************************************************************************/
 168          static void SaveCarID(uchar dir,ushort rxdata)
 169          {
 170   1       // uchar i,j;
 171   1        uchar id;
 172   1        uchar dirmsk;
 173   1       // uchar flg;
 174   1       // uchar *plife;
 175   1        
 176   1        id=(uchar)(rxdata>>10);
C51 COMPILER V9.52.0.0   IRCOMM                                                            09/08/2017 15:00:04 PAGE 4   

 177   1        id&=0x3F;
 178   1        
 179   1        if(id==gCarID) return;//
 180   1      //  if(id>(IR_CARNUM_MAX-1)) return;// id 号超过预定的数值
 181   1        dirmsk=(0x01<<(dir-1));
 182   1        gNeighborCar=dirmsk;
 183   1        grxflg=RX_FLG_NEWCAR; 
 184   1      }
 185          
 186          /*****************************************************************************
 187          brief: SaveAttackInfo , get the attack information from the rxdata, called in protocol.c 
 188          param:  void
 189          return:  void
 190          *********************************************************************************/
 191          static void SaveAttackInfo(uchar dir,ushort rxdata)
 192          {
 193   1        uchar info, id;
 194   1        rxdata>>=5;
 195   1        info=(uchar)(rxdata & 0x001F);
 196   1        rxdata>>=5;
 197   1        id=(uchar)(rxdata & 0x000F);
 198   1        
 199   1        if(id==gCarID) return;//
 200   1      //  gAttackInfo.Dir=dir;
 201   1      //  gAttackInfo.AttackInfo=info;
 202   1      //  gAttackInfo.AttackCarID=id;
 203   1        gAttackInfo=info;
 204   1        grxflg=RX_FLG_ATTACK;
 205   1        return;
 206   1        
 207   1      }
*** WARNING C280 IN LINE 191 OF Code\IRComm.c: 'dir': unreferenced local variable
 208          /*****************************************************************************
 209          brief: SetAttack ,set the IR module to send out an attack signal, called in protocol.c 
 210          param:  void
 211          return: void
 212          *********************************************************************************/
 213          void SetAttack(uchar attackprofile)
 214          {
 215   1        ushort tmp=0;
 216   1        
 217   1        tmp=attackprofile&0x6F;
 218   1        tmp<<=5;//IR_POS_ATTACK_INFO;
 219   1        gAttackData&=0xFC1F;//IR_ATTACK_INFO_MASK;
 220   1        gAttackData|=tmp;
 221   1         
 222   1        gattackpending=1;
 223   1      }
 224          /*****************************************************************************
 225          brief: SetCarID ,set the car ID for intelligent tracing, called in protocol.c 
 226          param:  void
 227          return: void
 228          *********************************************************************************/
 229          void SetCarID(uchar id)
 230          {
 231   1        ushort tmp;
 232   1       
 233   1        gCarID=id;
 234   1        
 235   1        tmp=id;
 236   1        tmp<<=10;//IR_CARID_POS;
 237   1       
C51 COMPILER V9.52.0.0   IRCOMM                                                            09/08/2017 15:00:04 PAGE 5   

 238   1        
 239   1        gAttackData=0;//&=((IR_INFOID_MASK)|(IR_CARID_MASK));
 240   1        gAttackData|=0xC000;//((0x0002<<14));
 241   1        gAttackData|=tmp;
 242   1      }
 243          
 244          /*****************************************************************************
 245          brief: SetCtrlMode ,setting the car work mode, , called in protocol.c 
 246          param:  mode, =0x00 is app control mode; =0x01 is remotor control mode
 247          return: void
 248          *********************************************************************************/
 249          void SetCtrlMode(uchar mode)
 250          {
 251   1        gCtrlMode=mode;
 252   1      }
 253          /*****************************************************************************
 254          brief: NeighborCarMgr,manage the neighbor of the car, called per 0.5s to performace the 
 255          counting action,  called in main.c 
 256          param:  void
 257          return: void
 258          *********************************************************************************/
 259          //void NeighborCarMgr(void)
 260          //{
 261          /////////////test////////////
 262          //    if(gtesttick)
 263          //    {
 264          //       if(GetMinus(GetIRTick(),gtesttick)>50000)
 265          //       {
 266          ////          p_Test=0;
 267          //          gtesttick=0;
 268          //       }
 269          //    
 270          //    }
 271          //  
 272          ////////////////////////////////
 273          //}
 274          
 275          /*****************************************************************************
 276          brief: IR_TxProcess , for sending a location signal or an attack signal , called in mainloop 
 277          param:  void
 278          return: void
 279          NOTE_1: the location signal will send per 150ms, when the channel is in free. before
 280          sending , the tx will wait for a random time for about 1~2ms to avoid conflicting with
 281          the other ones.
 282          
 283          NOTO_2: MSB is first to send
 284          *********************************************************************************/
 285          static void IR_TxProcess(void)
 286          {
 287   1        
 288   1       
 289   1        ushort tick16;
 290   1        uchar  tmp;
 291   1        // for the timer1 counter is only 65.535ms max with 1us resolution
 292   1        // TxTimerCount will extend the counting range to 4294967.295 ms with about 1~10us resolution
 293   1        // according to the CPU processing speed
 294   1      //  TxTimerCount();// 
 295   1        
 296   1        DisableInterrupts();
 297   1        
 298   1        if(gCtrlMode!=CTRL_APPMODE)
 299   1        {
C51 COMPILER V9.52.0.0   IRCOMM                                                            09/08/2017 15:00:04 PAGE 6   

 300   2          gLcTxSta=IR_IDLE;
 301   2        }
 302   1        
 303   1        switch(gLcTxSta)
 304   1        {
 305   2          case IR_IDLE:
 306   2            if(gattackpending)
 307   2            {
 308   3                if(IsIRBusy())//gIRSta[0] |gIRSta[1]|gIRSta[2]|gIRSta[3]
 309   3                {//busying in rx
 310   4                  break;
 311   4                }
 312   3                else
 313   3                {//send for not waiting
 314   4                  gLcTxSta=TX_SEND_HEAD_0;
 315   4                  glcCDSATick=GetIRTick();
 316   4                  SetAttackPin(1);// p_AttackTx=1;//open the 38KHz output
 317   4                  gattackpending=0;
 318   4               //   gisLcTx=0;
 319   4                }
 320   3            }
 321   2       
 322   2          break;
 323   2      ////////////// sending HEAD LOW period////////////////////    
 324   2          case TX_SEND_HEAD_0:
 325   2       
 326   2            tick16=GetMinus(GetIRTick(),glcCDSATick);
 327   2            
 328   2            if(tick16>PW_HEAD_LOW)
 329   2            {
 330   3              gLcTxSta=TX_SEND_HEAD_1;
 331   3              SetAttackPin(0);//p_AttackTx=0;
 332   3              glcCDSATick=GetIRTick();
 333   3            }
 334   2          break;
 335   2      ////////////// sending HEAD HIGH period////////////////////        
 336   2          case TX_SEND_HEAD_1:
 337   2       
 338   2            tick16=GetMinus(GetIRTick(),glcCDSATick);
 339   2            
 340   2            if(tick16>PW_HEAD_HIGH)
 341   2            {// send MSB
 342   3       
 343   3              SetAttackPin(1);//p_AttackTx=1;
 344   3              gTxSendData=gAttackData;
 345   3              
 346   3              if(gTxSendData & 0x8000)
 347   3              {// to send logic '1'
 348   4                gLcTxSta=TX_SEND_DATA_0_HIGH;
 349   4              }
 350   3              else
 351   3              {// to send logic '0'
 352   4                gLcTxSta=TX_SEND_DATA_0_LOW;
 353   4              }
 354   3              
 355   3              gLcTxDataCursor=0;
 356   3              glcCDSATick=GetIRTick();
 357   3            }
 358   2          break;
 359   2      ////////////// sending Data Phase0 branch: logic '1' about 1ms////////////////////      
 360   2          case TX_SEND_DATA_0_HIGH:
 361   2       
C51 COMPILER V9.52.0.0   IRCOMM                                                            09/08/2017 15:00:04 PAGE 7   

 362   2            tick16=GetIRTick();
 363   2            tick16=GetMinus(tick16,glcCDSATick);
 364   2            if(tick16>PW_DATA_0_HIGH)
 365   2            {
 366   3              SetAttackPin(0);// p_AttackTx=0;
 367   3              gLcTxSta=TX_SEND_DATA_1;
 368   3              gLcTxDataCursor++;
 369   3              glcCDSATick=GetIRTick();
 370   3            }
 371   2          break;
 372   2      ////////////// sending Data Phase0 branch: logic '0' about 0.5ms////////////////////      
 373   2          case TX_SEND_DATA_0_LOW:
 374   2       
 375   2            tick16=GetMinus(GetIRTick(),glcCDSATick);
 376   2            if(tick16>PW_DATA_0_LOW)
 377   2            {
 378   3       
 379   3              SetAttackPin(0);//  p_AttackTx=0;
 380   3       
 381   3              gLcTxSta=TX_SEND_DATA_1;
 382   3              gLcTxDataCursor++;
 383   3              glcCDSATick=GetIRTick();
 384   3            }
 385   2          break;
 386   2      ////////////// sending Data Phase1 0.5ms////////////////////      
 387   2          case TX_SEND_DATA_1:
 388   2       
 389   2            tick16=GetMinus(GetIRTick(),glcCDSATick);
 390   2            if(tick16>PW_DATA_1)
 391   2            {
 392   3              if(gLcTxDataCursor>=16)
 393   3              {//complet the sending
 394   4                gLcTxSta=IR_IDLE;
 395   4              }
 396   3              else
 397   3              {//sending next bit   send MSB
 398   4                gTxSendData<<=1;
 399   4                if(gTxSendData & 0x8000)
 400   4                {// to send logic '1'
 401   5                  gLcTxSta=TX_SEND_DATA_0_HIGH;
 402   5                }
 403   4                else
 404   4                {// to send logic '0'
 405   5                  gLcTxSta=TX_SEND_DATA_0_LOW;
 406   5                }
 407   4       
 408   4                SetAttackPin(1);//  p_AttackTx=1;
 409   4       
 410   4                glcCDSATick=GetIRTick();
 411   4              }
 412   3              
 413   3            }
 414   2          break;
 415   2        }
 416   1        
 417   1        GlobalInterruptEnable();//使能中断全局GIE。
 418   1      
 419   1      }
*** WARNING C280 IN LINE 290 OF Code\IRComm.c: 'tmp': unreferenced local variable
 420          
 421          /*****************************************************************************
 422          brief: IsIRBusy, check the IR Rx channel status ,call by Tx_Process
C51 COMPILER V9.52.0.0   IRCOMM                                                            09/08/2017 15:00:04 PAGE 8   

 423          param:  void
 424          return: 1=busy, 0=free
 425          *********************************************************************************/
 426          static uchar IsIRBusy(void)
 427          {
 428   1        if(gIRSta[0] |gIRSta[1]|gIRSta[2]|gIRSta[3])
 429   1        {
 430   2          return 1;
 431   2        }
 432   1        else if(gRxBitSet)
 433   1        {
 434   2          return 1;
 435   2        }
 436   1        
 437   1        return 0;
 438   1      }
 439          
 440          /*****************************************************************************
 441          brief: IR rx and decoder entrence, called in mainloop 
 442          param:  void
 443          return: void
 444          
 445          NOTO_1: MSB is first to RX
 446          *********************************************************************************/
 447          static void IR_RxProcess(void)
 448          {
 449   1          uchar level;
 450   1          //if(gLcTxSta>TX_IDLE) return;
 451   1          uchar i;
 452   1          uchar mask;
 453   1          
 454   1          mask=0x01;
 455   1          //gnewcardir=0;
 456   1          for(i=0;i<4;i++)
 457   1          { //i=0;
 458   2            if(gRxBitSet & mask)
 459   2            {
 460   3              level=GetIOLevel(i);
 461   3              IR_RecvOperate(i,IR_EVENT_INT,level,gIntSavedTick[i]);
 462   3              gRxBitSet&=(~mask);
 463   3            }
 464   2            else
 465   2            {
 466   3              if(gIRSta[i]>IR_IDLE)
 467   3              {
 468   4                IR_RecvOperate(i,IR_EVENT_TIMER,level,GetIRTick());
 469   4              }
 470   3            }
 471   2            mask<<=1;
 472   2          }
 473   1           
 474   1          if(grxflg==RX_FLG_ATTACK)
 475   1          {//send out attack info to master
 476   2      //      if(PT_PackResp(PT_CMD_ATTACKUPDATE,(uchar*)&gAttackInfo,0))
 477   2      //      {//good sending
 478   2      //        grxflg &=(~RX_FLG_ATTACK);
 479   2      //      }
 480   2            
 481   2          }
 482   1          else if(grxflg==RX_FLG_NEWCAR)
 483   1          {//send out new found car to master
 484   2      //      if(PT_PackResp(PT_CMD_CHECKCAR,(uchar*)gNeighborCar,0)) 
C51 COMPILER V9.52.0.0   IRCOMM                                                            09/08/2017 15:00:04 PAGE 9   

 485   2      //      {// good sending 
 486   2      //        // clear all buffer of the neibor
 487   2      //        for(i=0;i<IR_CARNUM_MAX;i++)
 488   2      //        {
 489   2      //          gNeighborCar[i].location=0;
 490   2      //        }
 491   2      //        
 492   2      //        grxflg=0;
 493   2      //        
 494   2      //        /////////test////////////      
 495   2      //       p_Test=1;
 496   2      //        gtesttick=GetIRTick();
 497   2      ////////////////////////////
 498   2      //      }
 499   2      
 500   2            
 501   2          }
 502   1          
 503   1           
 504   1      }
 505          
 506          
 507          /*****************************************************************************
 508          brief: to get the indicated io value  
 509          param: 
 510          return:  
 511          *********************************************************************************/
 512          //static uchar GetIOLevel(uchar i)
 513          //{
 514          //   uchar ret;
 515          //   
 516          //   switch(i)
 517          //   {
 518          //   case 0:
 519          //     ret=p_RxCH1;
 520          //   break;
 521          //   case 1:
 522          //     ret=p_RxCH2;
 523          //   break;
 524          //   case 2:
 525          //     ret=p_RxCH3;
 526          //   break;
 527          //   case 3:
 528          //     ret=p_RxCH4;
 529          //   break;
 530          //   }
 531          //   
 532          //   return ret;
 533          //}
 534          
 535          
 536          /*****************************************************************************
 537          param: level is the rx io level,=0 for low level; =1 for high levle
 538                 tick is the passed time , 1us per tick
 539          
 540          return: if the all rx is ok, then return 1; else return 0;
 541          *********************************************************************************/
 542          //#pragma optimize=none
 543          static uchar IR_RecvOperate(uchar i,uchar event,uchar level,ushort tick)
 544          {
 545   1        ushort pw;// pulse width ,unit= us 
 546   1        uchar temp;
C51 COMPILER V9.52.0.0   IRCOMM                                                            09/08/2017 15:00:04 PAGE 10  

 547   1        
 548   1        switch(gIRSta[i])
 549   1        {
 550   2          case IR_IDLE:
 551   2            if(level==0)
 552   2            {//falling edge interrupt
 553   3              gIRSta[i]=IR_RX_HEAD_0;
 554   3              gIRLastTick[i]=tick;//gIRTick_CH1=tick;//the start tick
 555   3            }
 556   2          break;
 557   2       /////////////////// wait for the first low level=wait for rising edge, pulsewidth=3ms////////////////////
 558   2          case IR_RX_HEAD_0:
 559   2            if(IR_EVENT_INT==event)
 560   2            {
 561   3              if(level==0) 
 562   3              {//error, it should be 1, 
 563   4                gIRSta[i]=IR_IDLE;
 564   4                break;
 565   4              }
 566   3              pw=GetMinus(tick,gIRLastTick[i]);// 
 567   3              if(ASSER_PULSE(pw,PW_HEAD_LOW,PW_TOLERANCE))
 568   3              {
 569   4                gIRSta[i]=IR_RX_HEAD_1;
 570   4                gIRLastTick[i]=tick;//the start tick
 571   4              }
 572   3              else
 573   3              {
 574   4                gIRSta[i]=IR_IDLE;
 575   4              }
 576   3            }
 577   2             
 578   2            else if(IR_EVENT_TIMER==event)
 579   2            {
 580   3              pw=GetMinus(tick,gIRLastTick[i]);// 
 581   3              if(pw>(PW_HEAD_LOW+PW_TOLERANCE+1000))
 582   3              {//maybe other sources are interrupt the receiving
 583   4                gIRSta[i]=IR_IDLE;
 584   4              }
 585   3            } 
 586   2          break;
 587   2      /////////////// wait for the following high level==wait for falling edge, pulsewidth=2ms/////////////    
 588   2          case IR_RX_HEAD_1:
 589   2            
 590   2            if(IR_EVENT_INT==event)
 591   2            {
 592   3              if(level==1) 
 593   3              {//error, it should be 0, 
 594   4                gIRSta[i]=IR_IDLE;
 595   4                break;
 596   4              }
 597   3              
 598   3              pw=GetMinus(tick,gIRLastTick[i]);// 
 599   3              
 600   3              if(ASSER_PULSE(pw,PW_HEAD_HIGH,PW_TOLERANCE))
 601   3              {
 602   4                gIRSta[i]=IR_RX_DATA_0;
 603   4                gIRLastTick[i]=tick;//the start tick
 604   4                gRxData[i]=0;
 605   4                gRxBitCnt[i]=0;
 606   4              }
 607   3              else
 608   3              {
C51 COMPILER V9.52.0.0   IRCOMM                                                            09/08/2017 15:00:04 PAGE 11  

 609   4                gIRSta[i]=IR_IDLE;
 610   4              }
 611   3            }
 612   2            else if(IR_EVENT_TIMER==event)
 613   2            {
 614   3              pw=GetMinus(tick,gIRLastTick[i]);// 
 615   3              if(pw>(PW_HEAD_HIGH+PW_TOLERANCE+100))
 616   3              {//maybe lost the signal source
 617   4                gIRSta[i]=IR_IDLE;
 618   4              }
 619   3            }
 620   2          break;
 621   2       /////////////// DataPhase0, wait for rising edge, pulsewidth=1ms or 0.5ms/////////////    
 622   2          case IR_RX_DATA_0:
 623   2            if(IR_EVENT_INT==event)
 624   2            {
 625   3              if(level==0) 
 626   3              {//error, it should be 1, 
 627   4                //maybe we can still get some infomation from this
 628   4                temp=gRxBitCnt[i];
 629   4                CheckFragData(i+1,temp,gRxData[i]);
 630   4                gIRSta[i]=IR_IDLE;
 631   4                break;
 632   4              }
 633   3              pw=GetMinus(tick,gIRLastTick[i]);// 
 634   3              
 635   3              if(ASSER_PULSE(pw,PW_DATA_0_HIGH,PW_TOLERANCE))
 636   3              {// logic 1 receving, 1ms
 637   4                gIRSta[i]=IR_RX_DATA_1;
 638   4                gIRLastTick[i]=tick;//the start tick
 639   4                gRxData[i]<<=1;
 640   4                gRxData[i]|=0x0001;
 641   4                gRxBitCnt[i]++;
 642   4                
 643   4                temp=gRxBitCnt[i];
 644   4                if(CheckData(i+1,temp,gRxData[i]))
 645   4                {
 646   5                    gIRSta[i]=IR_IDLE;
 647   5                    return 1;
 648   5                }
 649   4              }
 650   3              else if(ASSER_PULSE(pw,PW_DATA_0_LOW,PW_TOLERANCE))
 651   3              {// logic 0 receving, 0.5ms
 652   4                gIRSta[i]=IR_RX_DATA_1;
 653   4                gIRLastTick[i]=tick;//the start tick
 654   4                gRxData[i]<<=1;
 655   4                gRxData[i]&=0xFFFE;
 656   4                gRxBitCnt[i]++;
 657   4                temp=gRxBitCnt[i];
 658   4                if(CheckData(i+1,temp,gRxData[i]))
 659   4                {
 660   5                    gIRSta[i]=IR_IDLE;
 661   5                    return 1;
 662   5                }
 663   4                
 664   4              }
 665   3              else
 666   3              {
 667   4                temp=gRxBitCnt[i];
 668   4                CheckFragData(i+1,temp,gRxData[i]);
 669   4                gIRSta[i]=IR_IDLE;
 670   4              }
C51 COMPILER V9.52.0.0   IRCOMM                                                            09/08/2017 15:00:04 PAGE 12  

 671   3            }
 672   2            else if(IR_EVENT_TIMER==event)
 673   2            {
 674   3              pw=GetMinus(tick,gIRLastTick[i]);// 
 675   3              if(pw>(PW_DATA_0_HIGH+PW_TOLERANCE+100))
 676   3              {//maybe other sources are interrupt the receiving
 677   4                // we still can get some infomation from the error receiving ,if 
 678   4                temp=gRxBitCnt[i];
 679   4                CheckFragData(i+1,temp,gRxData[i]);
 680   4                gIRSta[i]=IR_IDLE;
 681   4              }
 682   3            }
 683   2          
 684   2          break;
 685   2          /////////////// DataPhase1, level=1,waiting for falling edge, pulsewidth=0.5ms/////////////    
 686   2          case IR_RX_DATA_1:
 687   2            if(IR_EVENT_INT==event)
 688   2            {  
 689   3                if(level==1) 
 690   3                {//error, it should be 0, 
 691   4                  temp=gRxBitCnt[i];
 692   4                  CheckFragData(i+1,temp,gRxData[i]);
 693   4                  gIRSta[i]=IR_IDLE;
 694   4                  break;
 695   4                }
 696   3                
 697   3                pw=GetMinus(tick,gIRLastTick[i]);// 
 698   3                
 699   3                if(ASSER_PULSE(pw,PW_DATA_1,PW_TOLERANCE))
 700   3                {
 701   4                  gIRSta[i]=IR_RX_DATA_0;
 702   4                  gIRLastTick[i]=tick;//the start tick
 703   4                }
 704   3                else
 705   3                {
 706   4                  temp=gRxBitCnt[i];
 707   4                  CheckFragData(i+1,temp,gRxData[i]);
 708   4                  gIRSta[i]=IR_IDLE;
 709   4                }
 710   3            }
 711   2            else if(IR_EVENT_TIMER==event)
 712   2            {
 713   3              pw=GetMinus(tick,gIRLastTick[i]);// 
 714   3              if(pw>(PW_DATA_1+PW_TOLERANCE+100))
 715   3              {//maybe lost the signal source
 716   4                // we still can get some infomation from the error receiving ,if 
 717   4                temp=gRxBitCnt[i];
 718   4                CheckFragData(i+1,temp,gRxData[i]);
 719   4                
 720   4                gIRSta[i]=IR_IDLE;
 721   4              }
 722   3            }
 723   2          break;
 724   2        }
 725   1        
 726   1        return 0;
 727   1      }
 728          
 729           
 730          /*****************************************************************************
 731          brief: CheckData , to check the rxdata information is completed, 
 732          param:    
C51 COMPILER V9.52.0.0   IRCOMM                                                            09/08/2017 15:00:04 PAGE 13  

 733          return: =0 for not complete, else ,=1 good data
 734          *********************************************************************************/
 735          static uchar CheckData(uchar dir, uchar bitlen,ushort  rxdata)
 736          {
 737   1         
 738   1        if(bitlen==8)
 739   1        {
 740   2          if((rxdata & 0x00C0)==0)
 741   2          {//location
 742   3            SaveCarID(dir,(rxdata<<8));
 743   3            return 1;
 744   3          }
 745   2        }
 746   1        else if(bitlen==16)
 747   1        {
 748   2          SaveAttackInfo(dir,rxdata);
 749   2          return 1;
 750   2        }
 751   1        
 752   1        return 0;
 753   1      }
 754          
 755          /*****************************************************************************
 756          brief: CheckData , to check the fragment rxdata information is still can be used,and
 757          get useful information from it
 758          param:    
 759          return: void
 760          *********************************************************************************/
 761          static void CheckFragData(uchar dir,uchar bitlen,ushort  rxdata)
 762          {
 763   1        if(bitlen>=6)
 764   1        {// can get the car id, and   
 765   2            rxdata<<=(16-bitlen);// to alien the data
 766   2            SaveCarID(dir,rxdata);
 767   2            if(bitlen>=11)
 768   2            {// get the attack infomation
 769   3              SaveAttackInfo(dir,rxdata);
 770   3            }
 771   2        }
 772   1        
 773   1        return ;
 774   1      }
 775          
 776          
 777          
 778          /*****************************************************************************
 779          brief: ASSER_PULSE , to check the pwcnt whether in range local in refcnt ± tolerance 
 780          param:    
 781          return: =0 for outsize the range, else ,=1 for inside the range
 782          *********************************************************************************/
 783          static uchar ASSER_PULSE(ushort pwcnt,ushort refcnt,ushort tolerance )
 784          {
 785   1        ushort t1, t2;
 786   1        
 787   1        t1=refcnt+tolerance;
 788   1        t2=refcnt-tolerance;
 789   1      
 790   1        if((t1>=pwcnt) && (pwcnt>=t2) )
 791   1        {
 792   2          return 1;
 793   2        }
 794   1        else 
C51 COMPILER V9.52.0.0   IRCOMM                                                            09/08/2017 15:00:04 PAGE 14  

 795   1        {
 796   2          return 0;
 797   2        }
 798   1      }
 799          
 800          //#pragma optimize=high
 801          
 802          /*****************************************************************************
 803          brief:TxTimerCount ,extend the counting range from 65.535ms to 4294967.295 ms
 804             for the timer1 counter is only 65.535ms max with 1us resolution
 805             TxTimerCount will extend the counting range to 4294967.295 ms with about 1~10us resolution
 806             according to the CPU processing speed
 807          param:    
 808          return: =0 for outsize the range, else ,=1 for inside the range
 809          *********************************************************************************/
 810          //static void TxTimerCount(void)
 811          //{
 812          //  ushort curtick;
 813          //  unsigned long tick;
 814          //  
 815          //  
 816          //  curtick=GetIRTick();
 817          //  
 818          //  if(curtick>gTxTickLastNibble)
 819          //  {
 820          //    gTxTickCnt+=(curtick-gTxTickLastNibble);
 821          //  }
 822          //  else
 823          //  {
 824          //    gTxTickCnt+=((0xFFFF-gTxTickLastNibble) + curtick);
 825          //  }
 826          //  
 827          //  gTxTickLastNibble=curtick;
 828          //  
 829          //  if(gCtrlMode==CTRL_APPMODE)
 830          //  {
 831          //    if(glcpending==0)
 832          //    {
 833          //      if(gTxTickCnt>gTxTickCntLast)
 834          //      {
 835          //        tick=gTxTickCnt-gTxTickCntLast;
 836          //        if(tick>TX_LC_PRD)
 837          //        {
 838          //          glcpending=1;
 839          //          gTxTickCntLast=gTxTickCnt;
 840          //        }
 841          //      }
 842          //    }
 843          //  }
 844          //  else
 845          //  {
 846          //    glcpending=0;
 847          //  }
 848          //  
 849          //   
 850          //}
 851          
 852          /*****************************************************************************
 853          brief: GetMinus ,produce tick1-tick2, with boundary check
 854          param:    
 855          return:  tick1-tick2
 856          *********************************************************************************/
C51 COMPILER V9.52.0.0   IRCOMM                                                            09/08/2017 15:00:04 PAGE 15  

 857          static ushort GetMinus(ushort tick1,ushort tick2)
 858          {
 859   1        ushort pw;
 860   1        
 861   1        if(tick1<tick2)
 862   1        {
 863   2           pw=(0xFFFF-tick2)+tick1;
 864   2        }
 865   1        else
 866   1        {
 867   2           pw=tick1-tick2;
 868   2        }
 869   1        
 870   1        return pw;
 871   1      
 872   1      }
 873          
 874          
 875          
 876          /*****************************************************************************
 877          param: Rx CH1 Initerrupt server routine
 878          return: void
 879          *********************************************************************************/
 880          void FrontIntHandler(void)
 881          {
 882   1        gIntSavedTick[0]=GetIRTick();
 883   1        gRxBitSet|=0x01;
 884   1      }
 885          
 886          /*****************************************************************************
 887          param: Rx CH2 Initerrupt server routine
 888          return: void
 889          *********************************************************************************/
 890          void BackIntHandler(void)
 891          {
 892   1        gIntSavedTick[1]=GetIRTick();
 893   1        gRxBitSet|=0x02;
 894   1      }
 895          
 896          
 897          /*****************************************************************************
 898          param: Rx CH3 Initerrupt server routine
 899          return: void
 900          *********************************************************************************/
 901          void LeftIntHandler(void)
 902          {
 903   1        gIntSavedTick[2]=GetIRTick();
 904   1        gRxBitSet|=0x04;
 905   1      }
 906          
 907          /*****************************************************************************
 908          param: Rx CH4 Initerrupt server routine
 909          return: void
 910          *********************************************************************************/
 911          void RightIntHandler(void)
 912          {
 913   1        gIntSavedTick[3]=GetIRTick();
 914   1        gRxBitSet|=0x08;
 915   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.52.0.0   IRCOMM                                                            09/08/2017 15:00:04 PAGE 16  

   CODE SIZE        =   2537    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     32    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     16      26
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
