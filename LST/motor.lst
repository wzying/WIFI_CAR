C51 COMPILER V9.52.0.0   MOTOR                                                             03/20/2018 17:38:01 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE MOTOR
OBJECT MODULE PLACED IN .\Output\motor.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Code\motor.c OPTIMIZE(4,SPEED) BROWSE INCDIR(.\Code\Common;.\Code;.\Code
                    -\BSP;.\Code\N76E003_HW) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\motor.lst) TABS(2) OBJECT(.\Output\motor.obj)

line level    source

   1          /***********************************************************************************
   2           Company  :   布塔科技
   3           File Name  : motor.c
   4           Author   : WANG 
   5           Create Data  :   2017-05-12
   6           Last Modified  : 2017-05-12
   7           Description  : 电机驱动函数  
   8           Version  :   1.0
   9          ************************************************************************************/
  10          #include "N76E003.h"
  11          #include "Common.h"
  12          #include "motor.h"
  13          #include "PWM.h"
  14          #include "SFR_Macro.h"
  15          #include "delay.h"
  16          #include "Function_define.h"
  17          /**************************************************
  18          *函数名： SetMotor_L
  19          *功能  ： 控制“左电机”的转速与方向
  20                    左电机 ： PWM1 + PWM4
  21          *参数  ：
  22                pwm：0-255  0->停止   255->最大速度
  23                direction：控制电机的正反转   0->正转   1->反转
  24          *返回  ： 无
  25          ***************************************************/
  26          void SetMotor_L(u8 pwm , u8 direction)
  27          {
  28   1        if(pwm == 0)//
  29   1        {
  30   2          SetPWM(1 , 0);
  31   2          SetPWM(4 , 0);
  32   2        }
  33   1        else
  34   1        {
  35   2          pwm += MOTOR_PWM_DIF;
  36   2          if(direction)//
  37   2          {
  38   3            SetPWM(1 , 0);
  39   3            SetPWM(4 , pwm);  
  40   3          }
  41   2          else//
  42   2          {
  43   3            SetPWM(1 , pwm);
  44   3            SetPWM(4 , 0);
  45   3          }
  46   2        }
  47   1      }
  48          
  49          /**************************************************
  50          *函数名： SetMotor_R
  51          *功能  ： 控制“右电机”的转速与方向
  52                    右电机 ： PWM3 + PWM0
  53          *参数  ：
  54                pwm：0-255  0->停止   255->最大速度
C51 COMPILER V9.52.0.0   MOTOR                                                             03/20/2018 17:38:01 PAGE 2   

  55                direction：控制电机的正反转   0->正转   1->反转
  56          *返回  ： 无
  57          ***************************************************/
  58          void SetMotor_R(u8 pwm , u8 direction)
  59          {
  60   1        if(pwm == 0)
  61   1        {
  62   2          SetPWM(3 , 0);
  63   2          SetPWM(0 , 0);    
  64   2        }
  65   1        else
  66   1        {
  67   2          pwm += MOTOR_PWM_DIF;
  68   2          if(direction)
  69   2          {
  70   3            SetPWM(3 , pwm);
  71   3            SetPWM(0 , 0);
  72   3          }
  73   2          else
  74   2          {
  75   3            SetPWM(3 , 0);
  76   3            SetPWM(0 , pwm);  
  77   3          }
  78   2        }
  79   1      }
  80          
  81          /**************************************************
  82          *函数名： SetMotor_STOP
  83          *功能  ： 电机停止转动（不刹车）
  84          *参数  ： 无
  85          *返回  ： 无
  86          ***************************************************/
  87          void SetMotor_STOP(void)
  88          {
  89   1      //  P12=0;P11=0; P00=0;P01=0;
  90   1        
  91   1        SetPWM(1 , 0);
  92   1        SetPWM(4 , 0);
  93   1        SetPWM(3 , 0);
  94   1        SetPWM(0 , 0);
  95   1      }
  96          
  97          /**************************************************
  98          *函数名： SetMotor_Brake
  99          *功能  ： 刹车
 100          *参数  ： 无
 101          *返回  ： 无
 102          ***************************************************/
 103          void SetMotor_Brake(void)
 104          {
 105   1          SetPWM(1 , 0xff);
 106   1          SetPWM(4 , 0xff);
 107   1          SetPWM(3 , 0xff);
 108   1          SetPWM(0 , 0xff);
 109   1      }
 110          
 111          /* 机械臂 */
 112          static ARM_DIR arm_Dir_Tem;
 113          void SetArm( ARM_DIR dir)
 114          {
 115   1        arm_Dir_Tem = dir;
 116   1        switch(dir)
C51 COMPILER V9.52.0.0   MOTOR                                                             03/20/2018 17:38:01 PAGE 3   

 117   1        {
 118   2        case ARM_UP:
 119   2          MOTOR_ARM_A = 1;
 120   2          MOTOR_ARM_B = 0;
 121   2          break;
 122   2        case ARM_DOWN:
 123   2          MOTOR_ARM_A = 0;
 124   2          MOTOR_ARM_B = 1;
 125   2          break;
 126   2        case ARM_STOP:
 127   2        default:
 128   2          MOTOR_ARM_A = 0;
 129   2          MOTOR_ARM_B = 0;
 130   2          break;
 131   2        }
 132   1      }
 133          /*
 134            获取机械臂状态
 135          */
 136          ARM_DIR GetArmStatus(void)
 137          {
 138   1        return arm_Dir_Tem;
 139   1      }
 140          
 141          
 142          /* 前爪 */
 143          static CLAW_DIR claw_Dir_Tem;
 144          void SetClaw( CLAW_DIR dir )
 145          {
 146   1        claw_Dir_Tem = dir;
 147   1        switch(dir)
 148   1        {
 149   2        case CLAW_RELEASE:
 150   2          MOTOR_CLAW_A = 1;
 151   2          MOTOR_CLAW_B = 0;
 152   2          break;
 153   2        case CLAW_HOLD:
 154   2          MOTOR_CLAW_A = 0;
 155   2          MOTOR_CLAW_B = 1;
 156   2          break;
 157   2        case CLAW_STOP: 
 158   2        default:
 159   2          MOTOR_CLAW_A = 0;
 160   2          MOTOR_CLAW_B = 0;
 161   2          break;
 162   2        } 
 163   1      }
 164          CLAW_DIR GetClawStatus(void)
 165          {
 166   1        return claw_Dir_Tem;
 167   1      }
 168          
 169          
 170          /*
 171            左电机
 172            speed < 0 反转
 173            speed > 0 正转
 174          */
 175          void Control_Motor_L(s16 speed)
 176          {
 177   1        if(speed >= 0)
 178   1        {
C51 COMPILER V9.52.0.0   MOTOR                                                             03/20/2018 17:38:01 PAGE 4   

 179   2          SetMotor_L(speed,0);
 180   2        }
 181   1        else
 182   1        {
 183   2          SetMotor_L(-speed,1);
 184   2        }
 185   1      }
 186          /*
 187            右电机
 188            speed < 0 反转
 189            speed > 0 正转
 190          */
 191          void Control_Motor_R(s16 speed)
 192          {
 193   1        if(speed >= 0)
 194   1        {
 195   2          SetMotor_R(speed,0);
 196   2        }
 197   1        else
 198   1        {
 199   2          SetMotor_R(-speed,1);
 200   2        }
 201   1      }
 202          
 203          /*
 204            小车前后左右控制
 205            speed : 前后速度控制量
 206            dir   : 转向信号控制量
 207          */
 208          void Control_Motor(u8 speed,u8 dir)
 209          {
 210   1        s16 carSpeed_L=0,carSpeed_R=0;
 211   1        u8 flag=0;
 212   1        
 213   1          carSpeed_L = speed - 0x80;
 214   1          carSpeed_R = speed - 0x80;
 215   1      
 216   1          if( dir != 0x80 )
 217   1          {
 218   2            if(speed == 0x80)//原地转向
 219   2            {
 220   3              if( dir > 0x80 )//
 221   3              {
 222   4                carSpeed_R = dir - 0x80;
 223   4                carSpeed_L = -carSpeed_R/2;
 224   4              }
 225   3              if( dir < 0x80 )
 226   3              {
 227   4                carSpeed_L = 0x80 - dir;
 228   4                carSpeed_R = -carSpeed_L/2;
 229   4              }
 230   3            }
 231   2            else if(speed > 0x80)//前进过程转向
 232   2            {
 233   3              if( dir > 0x80 )//
 234   3              {
 235   4                carSpeed_L = 0;
 236   4                carSpeed_R = dir - 0x80;
 237   4              }
 238   3              if( dir < 0x80 )
 239   3              {
 240   4                carSpeed_R = 0;
C51 COMPILER V9.52.0.0   MOTOR                                                             03/20/2018 17:38:01 PAGE 5   

 241   4                carSpeed_L = 0x80 - dir;
 242   4              }       
 243   3            }
 244   2            else if(speed < 0x80)//后退过程转向
 245   2            {
 246   3              if( dir > 0x80 )//
 247   3              {
 248   4                carSpeed_L = 0;
 249   4                carSpeed_R = 0x80 - dir;
 250   4              }
 251   3              if( dir < 0x80 )
 252   3              {
 253   4                carSpeed_R = 0;
 254   4                carSpeed_L = dir - 0x80;
 255   4              }           
 256   3            }
 257   2          } 
 258   1          
 259   1        Control_Motor_L(carSpeed_L);
 260   1        Control_Motor_R(carSpeed_R);
 261   1      }
 262          
 263          
 264          /*
 265            小车前后左右控制 -- 左右独立按键版本
 266            speed : 前后速度控制量
 267            dir   : 转向信号控制量
 268          */
 269          void Control_Motor_Key(u8 speed,u8 dir_l,u8 dir_r)
 270          {
 271   1          s16 carSpeed_L=0,carSpeed_R=0;
 272   1          u8 flag=0;
 273   1        
 274   1          if(speed != 0x80) //前进
 275   1          {
 276   2            carSpeed_L = speed - 0x80;
 277   2            carSpeed_R = speed - 0x80;
 278   2          }
 279   1          else  //转向
 280   1          {
 281   2            carSpeed_L = -(dir_l - 0x80);
 282   2            carSpeed_R = -(dir_r - 0x80);
 283   2          }
 284   1          
 285   1          Control_Motor_L(carSpeed_L);
 286   1          Control_Motor_R(carSpeed_R);
 287   1      }
 288          
 289          
 290          /*
 291            接收超时检测
 292            超时则停车
 293          */
 294          //#define TIMEOUT_MOTOR 700
 295          #define TIMEOUT_MOTOR 500
 296          u16 timeOut_Motor=0;
 297          u8 CheckTimeOut_Motor(void)
 298          {
 299   1        if(timeOut_Motor)
 300   1          timeOut_Motor--;
 301   1        else
 302   1          return 1;
C51 COMPILER V9.52.0.0   MOTOR                                                             03/20/2018 17:38:01 PAGE 6   

 303   1        
 304   1        return 0;
 305   1      }
 306          void Set_TimeOut_Motor(void)
 307          {
 308   1        timeOut_Motor = TIMEOUT_MOTOR;
 309   1      }
 310          
 311          /*
 312            WiFi信号接收超时
 313          */
 314          //#define TIMEOUT_WIFI 1000
 315          #define TIMEOUT_WIFI 800
 316          u16 timeOut_Wifi=0;
 317          u8 CheckTimeOut_Wifi(void)
 318          {
 319   1        if(timeOut_Wifi)
 320   1          timeOut_Wifi--;
 321   1        else
 322   1          return 1;
 323   1        
 324   1        return 0;
 325   1      }
 326          void Set_TimeOut_Wifi(void)
 327          {
 328   1        timeOut_Wifi = TIMEOUT_WIFI;
 329   1      }
 330          
 331          
 332          /*
 333            机械臂控制
 334            参数： arm -> WiFi控制信号
 335          */
 336          void Control_ARM(u8 arm)
 337          {
 338   1        if( arm <= 0x40 )
 339   1        {
 340   2          SetArm( ARM_UP );
 341   2        }
 342   1        else if( arm >= 0xD0 )
 343   1        {
 344   2          SetArm( ARM_DOWN );
 345   2        }
 346   1        else
 347   1        {
 348   2          SetArm( ARM_STOP );
 349   2        }
 350   1      
 351   1      }
 352          /*
 353            前爪控制
 354            
 355          */
 356          static u8 claw_Turn_Flag = 0;
 357          static u8 claw_EN = 0;
 358          void Set_Claw_EN(void)
 359          {
 360   1        claw_EN = 1;
 361   1      }
 362          void Reset_Claw_EN(void)
 363          {
 364   1        claw_EN = 0;
C51 COMPILER V9.52.0.0   MOTOR                                                             03/20/2018 17:38:01 PAGE 7   

 365   1      }
 366          u8 Check_Claw_EN(void)
 367          {
 368   1        return claw_EN;
 369   1      }
 370          void Claw_Trun(void)
 371          {
 372   1        if(claw_Turn_Flag)
 373   1          claw_Turn_Flag = 0;
 374   1        else
 375   1          claw_Turn_Flag = 1;
 376   1      }
 377          void Claw_Dir(void)
 378          {
 379   1        Set_Claw_EN();
 380   1        Set_TimeOut_Claw();
 381   1        if(claw_Turn_Flag)
 382   1          SetClaw( CLAW_HOLD );
 383   1        else
 384   1          SetClaw( CLAW_RELEASE );
 385   1      }
 386          
 387          void Control_Claw(u8 claw)
 388          {
 389   1        
 390   1        if( claw <= 0x40 )
 391   1        {
 392   2          Claw_Dir();
 393   2        }
 394   1        else if( claw >= 0xC0 )
 395   1        {
 396   2          Claw_Dir();
 397   2        }
 398   1        else
 399   1        {
 400   2          SetClaw( CLAW_STOP );   
 401   2        }
 402   1      }
 403          /*
 404            前爪 信号接收超时
 405          */
 406          //#define TIMEOUT_CLAW 600
 407          #define TIMEOUT_CLAW 400
 408          u16 timeOut_Claw=0;
 409          u8 CheckTimeOut_Claw(void)
 410          {
 411   1        if(timeOut_Claw)
 412   1          timeOut_Claw--;
 413   1        else
 414   1          return 1;
 415   1        
 416   1        return 0;
 417   1      }
 418          void Set_TimeOut_Claw(void)
 419          {
 420   1        timeOut_Claw = TIMEOUT_CLAW;
 421   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    874    ----
   CONSTANT SIZE    =   ----    ----
C51 COMPILER V9.52.0.0   MOTOR                                                             03/20/2018 17:38:01 PAGE 8   

   XDATA SIZE       =      8       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
